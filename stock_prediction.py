# -*- coding: utf-8 -*-
"""Stock Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZcUHMm_kWHWSQK6Zhjvp6AEGFYs9oAy
"""

!pip install pandas numpy matplotlib scikit-learn tensorflow requests

!pip install alpha_vantage

!pip install vaderSentiment

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from alpha_vantage.timeseries import TimeSeries
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import requests

api_key='67b33021cc2947.49818406'
ts = TimeSeries(key=api_key, output_format='pandas')
data, meta_data = ts.get_daily(symbol='AAPL', outputsize='full')
data.head()

# !pip install schedule

# import schedule
# import time
# def fetch_live_data():
#   data, _ = ts.get_quote_endpoint(symbol='AAPL')
#   print(data)

# schedule.every(5).minutes.do(fetch_live_data)

# while True:
#   schedule.run_pending()  #Checks if any tasks due to be run.
#   time.sleep(1) #pauses the loop for 1second

news_url = "https://newsapi.org/v2/everything?q=Apple&apiKey=c888069b671f4ca0bb7c58deca582c42"
response = requests.get(news_url)
news_data = response.json()

articles = [article['title'] for article in news_data["articles"]]
articles[:5]
# print(news_data)

analyzer = SentimentIntensityAnalyzer() #It is a tool used to determine the emotional tone of the text. Takes text as i/p and outputs sentiment as +ve, -ve or neutral.

def get_sentiment_score(text):
  return analyzer.polarity_scores(text)["compound"] #calculates the sentiment score of a given text using vader library

sentiment_scores = [get_sentiment_score(article) for article in articles]

print(data.columns)

#calculates the 20-day moving average of the stock's closing prices and stores it in a new column
data["moving_avg"] = data["4. close"].rolling(window=20).mean();
data.dropna(inplace=True)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

X = data[["moving_avg"]]
y = data["4. close"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, y_train) #training data

predictions = model.predict(X_test)

plt.figure(figsize=(15,3))
plt.plot(y_test.values, label="Actual Price")
plt.plot(predictions, label="Predicted Price")
plt.legend()
plt.show()

